import numpy as np
import matplotlib.pyplot as plt
from scipy.signal import find_peaks
from scipy.interpolate import interp1d
from some_peak_fitting_library import fit_peaks  # Hypothetical library or function
from some_phase_identification_library import identify_phase  # Hypothetical library or function
from some_quantitative_analysis_library import quantitative_analysis  # Hypothetical library

# Constants for Scherrer equation
K = 0.94  # Shape factor (varies based on crystallite shape)
lambda_xray = 1.5406e-10  # X-ray wavelength for Cu K-alpha in meters

def read_xrd_file(filename):
    """
    Reads an XRD data file with two columns: 2theta and intensity.
    """
    data = np.loadtxt(filename)
    two_theta = data[:, 0]
    intensity = data[:, 1]
    return two_theta, intensity

def detect_peaks(two_theta, intensity):
    """
    Detects peaks in XRD data.
    """
    peaks, _ = find_peaks(intensity)
    return two_theta[peaks], intensity[peaks]

def index_peaks(peaks, database='COD'):
    """
    Indexes peaks using a given database.
    """
    identified_phases = identify_phase(peaks, database)
    return identified_phases

def scherrer(peak_width, theta):
    """
    Calculates crystallite size using the Scherrer equation.
    """
    rad_theta = np.radians(theta)
    crystallite_size = K * lambda_xray / (peak_width * np.cos(rad_theta))
    return crystallite_size

def calculate_strain(peak_width, theta):
    """
    Estimates strain from peak broadening.
    """
    rad_theta = np.radians(theta)
    strain = peak_width / (4 * np.tan(rad_theta))
    return strain

def perform_analysis(file_list):
    for filename in file_list:
        # Read the data
        two_theta, intensity = read_xrd_file(filename)
        
        # Detect peaks
        peak_positions, peak_intensities = detect_peaks(two_theta, intensity)
        
        # Index the peaks
        identified_phases = index_peaks(peak_positions, database='COD')
        
        # Fit peaks to get peak width for Scherrer calculation
        peak_widths = fit_peaks(two_theta, intensity, peak_positions)
        
        # Calculate crystallite size and strain
        crystallite_sizes = scherrer(peak_widths, peak_positions)
        strains = calculate_strain(peak_widths, peak_positions)
        
        # Quantitative phase analysis
        phase_quantities = quantitative_analysis(peak_intensities, identified_phases)
        
        # Output results
        print(f"Results for {filename}:")
        print("Identified Phases:", identified_phases)
        print("Crystallite Sizes (nm):", crystallite_sizes * 1e9)
        print("Strains:", strains)
        print("Phase Quantities:", phase_quantities)
        print("\n")
        
# List of XRD data files
xrd_files = ['A.xy', 'B.xy', 'C.xy', 'D.xy', 'E.xy']

# Perform analysis on all files
perform_analysis(xrd_files)
